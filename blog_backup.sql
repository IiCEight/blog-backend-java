-- MySQL dump 10.13  Distrib 8.0.36, for Win64 (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	8.0.36

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `article` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `img` varchar(512) DEFAULT NULL,
  `description` text,
  `content` longtext NOT NULL,
  `category_id` int NOT NULL,
  `status` varchar(20) DEFAULT NULL,
  `views` bigint DEFAULT '0',
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'Hello marked','https://iisaber.oss-cn-beijing.aliyuncs.com/blog/2025-05-14/81c1ce60-e219-47fe-a254-ef4dcfcbeba6.png','Congratulations!!! Add article successfully!','<h1>Hello marked</h1>\n<p><code>hello marked</code>.</p>\n<p><strong>hello katex:</strong></p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mspace linebreak=\"newline\"></mspace><mo>&lt;</mo><mi>b</mi><mi>r</mi><mo>&gt;</mo><mi>h</mi><mi>a</mi><mi>h</mi><mtext> </mtext><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_a^bf(x) = F(b) - F(a)\n\\\\\n\\\\\n&lt;br&gt;\nhah \\\n\\partial x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.511em;vertical-align:-0.9119em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.599em;\"><span style=\"top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.8129em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">hah</span><span class=\"mspace\"> </span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span></span></span>\n<p>in Which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is the drivation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> katexOptions = {\n    <span class=\"hljs-attr\">throwOnError</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">nonStandard</span>: <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-keyword\">const</span> markedOptions = {\n    <span class=\"hljs-attr\">async</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">gfm</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-keyword\">break</span> : <span class=\"hljs-literal\">true</span>\n}\n</code></pre>',6,'Published',0,'2025-05-14 23:48:41','2025-05-14 23:48:41'),(3,'Western Literature','https://iisaber.oss-cn-beijing.aliyuncs.com/blog/2025-05-15/7a47d5a4-9012-4358-ba5a-59f096392ab8.jpg','Western Literature course homework.','<h1>Western Literature</h1>\n<p>Sonnet 75 (Edmund Spenser)<br>One day I wrote her name upon the strand,<br>But came the waves and washed it away:<br>Again I wrote it with a second hand,<br>But came the tide, and made my pains his prey.<br>Vain man, said she, that doest in vain assay<br>A mortal thing so to immortalize,<br>For I myself shall like to this decay,<br>And eek my name be wiped out likewise.Not so (quoth I), let baser things devise<br>To die in dust, but you shall live by fame:<br>My verse your virtues rare shall eternize,<br>And in the heavens write your glorious name.<br>Where whenas Death shall all the world subdue,<br>Out love shall live, and later life renew.</p>\n<h3>translation</h3>\n<p>One day, I wrote my lover’s name in the sand,<br>But the waves came and washed it away.<br>I wrote it again with my own hand,<br>But the tide returned and erased it once more.</p>\n<p>She said, &quot;You foolish man, why try in vain<br>To make something mortal last forever?<br>Just like this name fades away,<br>I, too, will one day be gone.&quot;</p>\n<p>I replied, &quot;No, let lesser things turn to dust,<br>But you will live on through fame.<br>My poetry will make your rare virtues eternal,<br>And your glorious name will be written in the heavens.</p>\n<p>Even when Death conquers the entire world,<br>Our love will live on and be reborn in future generations.&quot;</p>\n<h3>背景</h3>\n<ol>\n<li><p>作者背景<br>埃德蒙·斯宾塞（Edmund Spenser，1552-1599）是英国文艺复兴时期的重要诗人，以史诗《仙后》（The Faerie Queene）闻名。他的诗歌风格典雅，擅长运用丰富的象征与韵律结构。</p>\n</li>\n<li><p>诗集《Amoretti》<br>《Sonnet 75》选自斯宾塞的十四行诗集《Amoretti》（Amoretti, 1595），该诗集是一系列情诗，讲述了诗人与未婚妻伊丽莎白·博伊尔（Elizabeth Boyle）之间的爱情故事。与许多当时流行的悲剧式爱情诗不同，Amoretti 主要展现的是诗人追求爱情、战胜困难，最终步入婚姻的过程。</p>\n</li>\n<li><p>文艺复兴与诗歌传统</p>\n</li>\n</ol>\n<p>十四行诗（Sonnet）：14世纪由意大利诗人彼特拉克（Petrarch）发展，后在16世纪被莎士比亚、斯宾塞等英国诗人改进。斯宾塞采用了一种独特的“斯宾塞式十四行诗”结构（ABAB BCBC CDCD EE）。</p>\n<p>文艺复兴思想：强调人文主义、个体情感的表达，以及诗歌和艺术能够赋予事物不朽的信仰。斯宾塞的诗歌不仅是对爱情的歌颂，也反映了文艺复兴时期对艺术与永恒的追求。</p>\n<ol start=\"4\">\n<li>诗歌的主题与现实背景<br>斯宾塞在诗中表达了诗歌能够超越时间的力量，而这与他当时所处的社会环境有关：</li>\n</ol>\n<p>对抗时间的消逝：16世纪的欧洲正经历动荡，诗人们渴望通过文学作品留下永恒的印记。</p>\n<p>爱情与婚姻：诗人当时正追求他的未婚妻，因此这首诗也可能是向她表达忠贞和诗歌赋予爱情不朽的承诺。</p>\n<p>总的来说，《Sonnet 75》既是斯宾塞对爱情的赞美，也是文艺复兴时期诗人对艺术和永恒主题的思考。</p>\n<p>The Eternal Power of Poetry</p>\n<p>Sonnet 75 emphasizes the power of poetry to grant eternal life to love. The poet uses the image of waves erasing a name in the sand to symbolize time’s erosion of all things. His lover accepts that life will eventually fade, but he insists that, while everything perishes, poetry can transcend time and preserve her virtues and name for future generations. This reflects the Renaissance belief in the immortality of art and demonstrates his unwavering devotion. Through this poem, Spenser not only praises love but also highlights literature’s unique role in defying time and oblivion.</p>\n<p>Sonnet 1 (Philip Sidney)<br>Loving in truth, and fain in verse my love to show,<br>That she (dear She) might take some pleasure of my pain:<br>Pleasure might cause her read, reading might make her know,<br>Knowledge might pity win, and pity grace obtain;<br>I sought fit words to paint the blackest face of woe,<br>Studying inventions fine, her wits to entertain:<br>Oft turning others&#39; leaves, to see if thence would flow<br>Some fresh and fruitful showers upon my sun-burned brain.<br>But words came halting forth, wanting Invention&#39;s stay,<br>Invention, Nature&#39;s child, fled step-dame Study&#39;s blows,<br>And others&#39; feet still seemed but strangers in my way.<br>Thus, great with child to speak, and helpless in my throes,<br>Biting my truant pen, beating myself for spite--<br>&quot;Fool,&quot; said my Muse to me, &quot;look in thy heart and write.&quot;</p>\n<h3>背景</h3>\n<p>菲利普·西德尼《第1号十四行诗》解析</p>\n<ol>\n<li><p>背景与简介<br>本诗是菲利普·西德尼（Philip Sidney）十四行诗集《阿斯特罗菲尔与斯黛拉》（Astrophel and Stella, 1582）的开篇之作。这是英国最早的十四行诗序列之一，讲述了诗人阿斯特罗菲尔（Astrophel）对斯黛拉（Stella）的爱情故事。Sonnet 1 展现了诗人苦苦寻找表达爱意的恰当方式的困境。</p>\n</li>\n<li><p>主题：真情表达的挣扎<br>诗人希望用诗歌表达爱意，以期打动所爱之人。他认为，如果她能从中感受到自己的痛苦，她或许会读下去，理解他的情感，进而生出怜悯，并最终接受他的爱。然而，尽管他费尽心思雕琢辞藻，言辞却依然苍白无力。</p>\n</li>\n<li><p>知识与创意的冲突<br>诗人尝试从他人的作品中汲取灵感，但发现这些“外来的步伐”对自己的创作毫无帮助。他将“灵感”（Invention）比作“自然的孩子”，而将“学习”（Study）比作“继母”（step-dame），暗示刻板的学术训练扼杀了创意。</p>\n</li>\n<li><p>解决之道：聆听内心<br>在最后一句中，他的缪斯对他说：“愚蠢的人啊，看看你的内心，然后写下来！”（&quot;Fool,&quot; said my Muse to me, &quot;look in thy heart and write.&quot;）这句警句式的忠告点明了整首诗的核心思想：真正的诗歌应源于内心，而非从书本中照搬得来。</p>\n</li>\n<li><p>文学手法<br>扩展隐喻（Extended Metaphor）：诗人将写作比作分娩（&quot;great with child to speak&quot;），表达创作过程的艰难与痛苦。</p>\n</li>\n</ol>\n<p>拟人（Personification）：Invention（灵感）被拟人化，逃离了Study（学习）的束缚，象征机械的学习无法激发真正的创造力。</p>\n<p>对比（Contrast）：外在的学习（他人的书籍）与内心的真情实感形成对比。</p>\n<ol start=\"6\">\n<li>结论<br>西德尼在这首诗中表达了文艺复兴时期对原创性和真情流露的追求。他不仅记录了自己的创作挣扎，也提出了一个重要的诗学观点——伟大的诗歌源自内心的真挚情感，而非简单地模仿前人。这首诗既是对爱情的诉说，也是诗人创作理念的宣言。</li>\n</ol>\n<h3><strong>Sonnet 1 – Modern English Translation</strong></h3>\n<p>Loving truly, and wishing to express my love in verse,<br> So that she (my dear love) might find joy in my suffering.<br> If my pain brings her pleasure, she may continue to read,<br> Reading may help her understand, and understanding may bring pity,<br> And pity might lead to love and kindness in return.</p>\n<p>I searched for the right words to describe my deepest sorrow,<br> Studying clever poetic techniques to impress her.<br> I often turned to the works of others, hoping to find<br> Some fresh inspiration to awaken my weary mind.</p>\n<p>But my words stumbled forth, lacking creativity’s guidance.<br> Imagination, the child of nature, fled from the harsh blows of study,<br> And the words of other poets felt foreign and unhelpful.</p>\n<p>Thus, burdened with unspoken thoughts and struggling to express them,<br> I bit my pen in frustration, scolding myself.<br> &quot;Fool,&quot; my Muse said to me, &quot;look into your heart and write.&quot;</p>\n<p>The Conflict Between Study and Natural Inspiration</p>\n<p>In Sonnet 1, Sidney highlights the struggle between learned poetic techniques and genuine emotional expression. The speaker initially relies on study and the works of others to craft his poetry, hoping to impress his beloved. However, he finds that formal learning stifles his creativity rather than enhances it. His frustration builds until his Muse advises him to abandon artificial methods and write from the heart. This reflects the Renaissance belief that true poetry comes from sincere emotion rather than mere technical skill, emphasizing the power of natural inspiration over forced literary craftsmanship.</p>\n<p>On His Blindness (John Milton)</p>\n<p> When I consider how my light is spent<br>Ere half my days in this dark world and wide,<br>And that one talent which is death to hide<br>Lodg&#39;d with me useless, though my soul more bent<br>To serve therewith my Maker, and present<br>My true account, lest he returning chide,<br>&quot;Doth God exact day-labour, light denied?&quot;<br>I fondly ask. But Patience, to prevent<br>That murmur, soon replies: &quot;God doth not need<br>Either man&#39;s work or his own gifts: who best<br>Bear his mild yoke, they serve him best. His state<br>Is kingly; thousands at his bidding speed<br>And post o&#39;er land and ocean without rest:<br>They also serve who only stand and wait.&quot;</p>\n<h3>背景</h3>\n<p>约翰·弥尔顿《盲目的时候》解析</p>\n<ol>\n<li><p>背景与简介<br>约翰·弥尔顿（John Milton）是英国伟大的诗人之一，他在1652年左右完全失明。*《盲目的时候》*是他在失明后创作的深刻个人诗歌，表达了他对于失去视力后的困惑与挣扎。此诗采用彼得拉克式十四行诗（ABBAABBA CDECDE）结构。</p>\n</li>\n<li><p>主题：逆境中的信念与使命<br>弥尔顿感叹自己在生命的半程就失去了光明，他担心自己无法再用“天赋”（这是指才华或上帝赋予的能力）来服务上帝。他质疑上帝是否要求那些失去视力的人继续工作。</p>\n</li>\n<li><p>解答：对上帝的信任<br>“耐心”作为一个人格化的声音给出了回答。耐心告诉诗人，上帝并不要求特定的工作，而更看重那些能忍受生活重负并保持信念的人。有些人通过行动服务上帝，而另一些人则通过等待和接受命运来服务上帝。</p>\n</li>\n<li><p>文学手法<br>隐喻：诗中的“光”象征视力和生命；“天赋”指的是弥尔顿的诗才。</p>\n</li>\n</ol>\n<p>人格化：“耐心”被赋予智慧的声音，引导诗人。</p>\n<p>圣经典故：提到《马太福音》25:14-30中的“天赋比喻”，强调每个人都应善用天赋。</p>\n<ol start=\"5\">\n<li>结论<br>弥尔顿最终通过信仰找到内心的平静，相信即使是被动的忍耐也是对上帝的一种服务。诗歌最后一句：“他们也在服务，那些仅仅站着等待的人”成为了英国诗歌中关于信仰和接受的著名名句。</li>\n</ol>\n<p>The Theme of Faith and Patience</p>\n<p>In On His Blindness, Milton expresses the acceptance of adversity and the strength of faith through the voice of &quot;Patience.&quot; The poet, troubled by his blindness, worries that he can no longer serve God. However, Patience reassures him that God does not demand specific work but values those who endure hardships and remain steadfast in faith. Through this answer, Milton realizes that patience and waiting are also ways to serve God, emphasizing the importance of maintaining faith in the face of adversity.</p>\n',8,'Published',0,'2025-05-15 00:03:06','2025-05-15 00:03:06'),(5,'Java','https://iisaber.oss-cn-beijing.aliyuncs.com/blog/2025-05-15/450d8ac8-cf34-4fe7-b586-fa35dab01dbc.jpg','Java notes.','<h1>Java</h1>\n<h2>Basic</h2>\n<h3>Input</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">test</span> \n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> \n    {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n        \n    }\n}\n</code></pre><h3>Array</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">//Array is created in heap by new.</span>\n<span class=\"hljs-comment\">//Initial value will be zero.</span>\n<span class=\"hljs-type\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>];\n\n<span class=\"hljs-type\">int</span>[] b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>}\n<span class=\"hljs-type\">int</span>[] c = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>} <span class=\"hljs-comment\">//short write thus it&#x27;s in heap</span>\n\n\n<span class=\"hljs-comment\">//Copy is not complete.</span>\n<span class=\"hljs-type\">int</span>[] d = c;\nd[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span>; <span class=\"hljs-comment\">//Then c[0] will be 100.</span>\n</code></pre><h3>Method</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>\n{\n    <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-comment\">//Overload</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">int</span> c)</span>\n{\n    <span class=\"hljs-keyword\">return</span> a + b + c;\n}\n</code></pre><h3>Class</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">//One file can only have one public class with the same name of file itself.</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">saber</span> \n{\n    <span class=\"hljs-comment\">//static will let all instance share the same value.</span>\n   	<span class=\"hljs-comment\">//and will be placed special place in heap. </span>\n    <span class=\"hljs-keyword\">static</span> String name;\n    <span class=\"hljs-type\">int</span> age;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fight</span><span class=\"hljs-params\">()</span>\n    {\n        System.out.println(<span class=\"hljs-string\">&quot;fight!!!&quot;</span>);\n    }\n}\n</code></pre><p>In Java, there is a special <strong>class</strong> with the name <code>Class</code>. It describe the some comme property of class.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Class</span>&lt;T&gt; implements ... {\n	...\n}\n</code></pre><p>How could we create a instance of Class</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// 1. Use Class.forName Since Class.forName is static and it can be applied</span>\n<span class=\"hljs-comment\">// without a instance</span>\n\n<span class=\"hljs-comment\">//Note: Class.forName need fully qualified name</span>\n<span class=\"hljs-comment\">// (which includes the package name)</span>\nClass &lt;?&gt; clazz = Class.forName(<span class=\"hljs-string\">&quot;exercise.reflection.reflectionClass&quot;</span>)\n\n\n<span class=\"hljs-comment\">// 2. The className.class syntax is a static way </span>\n<span class=\"hljs-comment\">// to get the Class object of a class at compile time. </span>\n<span class=\"hljs-comment\">// In Java, every class has a Class object associated with it. </span>\nClass&lt;?&gt; clazz2 = reflectionClass.class;\n\n\n<span class=\"hljs-comment\">// 3. Use the instance of specified class</span>\n<span class=\"hljs-type\">reflectionClass</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">reflectionClass</span>();\nClass&lt;?&gt; class3 = r.getClass();\n</code></pre><p>And it has many methods to get the information of our specified class</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Get the constructor of specified class</span>\nConstructor&lt;?&gt;[] cons = clazz1.getConstructors();\n\n<span class=\"hljs-comment\">//Get the field of specified class</span>\nField[] field = clazz1.getFields();\n\n<span class=\"hljs-comment\">//Get the method of specified class</span>\nMethod[] method = clazz1.getMethods();\n</code></pre><p>Note: interface also has its own Class instance. So we can use this to handle annotation which is in fact a interface.</p>\n<h3>String</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">//string is a reference</span>\n\n<span class=\"hljs-comment\">//This is a constant string placed in a special area of heap.</span>\n<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;saber&quot;</span>; \n<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;saber&quot;</span>; \n<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">&quot;saber&quot;</span>)\n\n<span class=\"hljs-comment\">// == compare the reference i.e. address of string not the string.</span>\nss == s <span class=\"hljs-comment\">//this result is true since ss will point the same constant string.</span>\n\ns == sss <span class=\"hljs-comment\">// this is false since the address of strings is different.</span>\n    \n<span class=\"hljs-comment\">//s[0] is not defined.</span>\ns.charAt(<span class=\"hljs-number\">0</span>)\n    \n<span class=\"hljs-comment\">//StringBuilder behaves like string in c++.</span>\n<span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\nsb.append(<span class=\"hljs-string\">&quot;saber&quot;</span>);\n<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> sb.toString()\n</code></pre><h3>Enum</h3>\n<p>An <code>enum</code> (short for <strong>enumeration</strong>) is a <strong>special Java type</strong> used to define a collection of <strong>constants</strong>.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// define</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">OperationType</span> {\n\n    <span class=\"hljs-comment\">/**\n     * 更新操作\n     */</span>\n    UPDATE,\n\n    <span class=\"hljs-comment\">/**\n     * 插入操作\n     */</span>\n    INSERT\n}\n\n<span class=\"hljs-comment\">// use</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doSomething</span><span class=\"hljs-params\">(OperationType type)</span> {\n    <span class=\"hljs-keyword\">if</span> (type == OperationType.INSERT) {\n        <span class=\"hljs-comment\">// insert logic</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == OperationType.UPDATE) {\n        <span class=\"hljs-comment\">// update logic</span>\n    }\n}\n</code></pre><h3>Extend</h3>\n<pre><code class=\"hljs language-java\">\n</code></pre><h3>Collection</h3>\n<pre><code class=\"hljs\">              Collection (interface)\n               /     |       \\\n         List     Set     Queue  &lt;- interfaces\n          |        |        |\n  ArrayList  HashSet  LinkedList &lt;- classes\n</code></pre><p>Use map or stream operation on List:</p>\n<pre><code class=\"hljs language-java\">list.stream().map(()-&gt; ...).toList();\n</code></pre><h3>Serializable</h3>\n<p><code>Serializable</code> is a <strong>marker interface</strong> in Java (<code>java.io.Serializable</code>) that tells the Java Virtual Machine (JVM) a class can be <strong>converted into a byte stream</strong>, which can then be:</p>\n<p><strong>Saved to a file</strong></p>\n<p><strong>Sent over a network</strong></p>\n<p><strong>Stored in memory</strong> (e.g., in Redis)</p>\n<p><strong>Reconstructed (deserialized)</strong> later</p>\n<h3>Generics</h3>\n<p>Create a generic class</p>\n<h4>Generic Class</h4>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// use T as the type</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">genericsClass</span>&lt;T&gt; {\n    \n    <span class=\"hljs-keyword\">private</span> T value;\n\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">getValue</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> value;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setValue</span><span class=\"hljs-params\">(T value)</span> {\n        <span class=\"hljs-built_in\">this</span>.value = value;\n    }\n}\n\n<span class=\"hljs-comment\">// Multiple type Parameters</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span>&lt;T, U&gt;\n{\n    T obj1;  <span class=\"hljs-comment\">// An object of type T</span>\n    U obj2;  <span class=\"hljs-comment\">// An object of type U</span>\n\n    <span class=\"hljs-comment\">// constructor</span>\n    Test(T obj1, U obj2)\n    {\n        <span class=\"hljs-built_in\">this</span>.obj1 = obj1;\n        <span class=\"hljs-built_in\">this</span>.obj2 = obj2;\n    }\n\n    <span class=\"hljs-comment\">// To print objects of T and U</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">()</span>\n    {\n        System.out.println(obj1);\n        System.out.println(obj2);\n    }\n}\n</code></pre><p>Use it</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">generics</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">// Note: type must be a reference type</span>\n        genericsClass&lt;Integer&gt; g = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">genericsClass</span>&lt;&gt;();\n        \n        g.setValue(<span class=\"hljs-number\">100</span>);\n\n        System.out.println(g.getValue());\n    }\n}\n</code></pre><p>Unbounded wildcard <code>?</code> is used when specifying a concrete type, so it can receive any type</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">generics</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-comment\">// Note: type must be a reference type</span>\n        genericsClass&lt;Integer&gt; g1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">genericsClass</span>&lt;&gt;();\n        genericsClass&lt;String&gt; g2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">genericsClass</span>&lt;&gt;();\n        \n        <span class=\"hljs-comment\">//Thus we use &lt;?&gt; to receive &lt;Integer&gt; and &lt;String&gt;</span>\n        show(g1);\n        show(g2);\n    }\n\n    <span class=\"hljs-comment\">// Here we must specify concrete type like Integer or String</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">(genericsClass&lt;?&gt; x)</span>{\n        System.out.println(x.getValue());\n    }\n}\n</code></pre><h4>Generic Method</h4>\n<p>If we want to use Generic Method in a non-generic class, we need to specify type parameters before function by <code>&lt;&gt;</code>.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Geeks</span> {\n    \n    <span class=\"hljs-comment\">// A Generic method example</span>\n    <span class=\"hljs-comment\">// Use &lt;T&gt; to tell compiler to use Generic Method.</span>\n    <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">genericDisplay</span><span class=\"hljs-params\">(T element)</span>\n    {\n        System.out.println(element.getClass().getName()\n                           + <span class=\"hljs-string\">&quot; = &quot;</span> + element);\n    }\n\n    <span class=\"hljs-comment\">// Driver method</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>\n    {\n        <span class=\"hljs-comment\">// Calling generic method with Integer argument</span>\n        genericDisplay(<span class=\"hljs-number\">11</span>);\n\n        <span class=\"hljs-comment\">// Calling generic method with String argument</span>\n        genericDisplay(<span class=\"hljs-string\">&quot;GeeksForGeeks&quot;</span>);\n\n        <span class=\"hljs-comment\">// Calling generic method with double argument</span>\n        genericDisplay(<span class=\"hljs-number\">1.0</span>);\n    }\n}\n</code></pre><h3>Reflection</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">reflection</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException {\n        \n        <span class=\"hljs-comment\">//Note: Class.forName need fully qualified name </span>\n        <span class=\"hljs-comment\">// (which includes the package name)</span>\n        <span class=\"hljs-comment\">// Class.forName is static</span>\n        Class&lt;?&gt; clazz1 = Class.forName(<span class=\"hljs-string\">&quot;exercise.reflection.reflectionClass&quot;</span>);\n        \n        <span class=\"hljs-comment\">// The className.class syntax is a static way </span>\n        <span class=\"hljs-comment\">// to get the Class object of a class at compile time. </span>\n        <span class=\"hljs-comment\">// In Java, every class has a Class object associated with it. </span>\n        Class&lt;?&gt; clazz2 = reflectionClass.class;\n        \n        <span class=\"hljs-comment\">// Use the instance of specified class</span>\n        <span class=\"hljs-type\">reflectionClass</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">reflectionClass</span>();\n        Class&lt;?&gt; class3 = r.getClass();\n        \n        <span class=\"hljs-comment\">// Get the constructor of specified class</span>\n        Constructor&lt;?&gt;[] cons = clazz1.getConstructors();\n        <span class=\"hljs-keyword\">for</span> (Constructor&lt;?&gt; x : cons) {\n            System.out.println(x);\n        }\n        \n        <span class=\"hljs-comment\">//Get the field of specified class</span>\n        Field[] field = clazz1.getFields();\n        \n        <span class=\"hljs-keyword\">for</span> (Field x : field) {\n            System.out.println(x);\n        }\n\n        <span class=\"hljs-comment\">//Get the method of specified class</span>\n        Method[] method = clazz1.getMethods();\n        \n    }\n}\n</code></pre><h3>Custom Annotations</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"hljs-comment\">// Available at runtime</span>\n<span class=\"hljs-meta\">@Target(ElementType.METHOD)</span>         <span class=\"hljs-comment\">// Can be used on methods</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> AutoFill {\n    \n    <span class=\"hljs-comment\">// Note: the field is represented as method.</span>\n    OperationType <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span>;\n    \n    <span class=\"hljs-comment\">// use default to set default value</span>\n    \n    String <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;saber&quot;</span>;\n}\n</code></pre><p><strong>Use reflection to test whether there is such annotation and execute corresponding annotation behavors.</strong></p>\n<p>Then we can add this annotation to any method.</p>\n<h3>yml</h3>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># define object/map set</span>\n<span class=\"hljs-attr\">user:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Tom</span>\n    <span class=\"hljs-attr\">age:</span> <span class=\"hljs-number\">18</span>\n    <span class=\"hljs-attr\">gender:</span> <span class=\"hljs-string\">male</span>\n\n\n<span class=\"hljs-comment\"># define array/List</span>\n<span class=\"hljs-attr\">hobby:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Java</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">game</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">sport</span>\n</code></pre><h2>Maven</h2>\n<h3>Basic</h3>\n<p>We can use <code>&lt;groupId&gt;</code>,  <code>&lt;artifactId&gt;</code> and <code>&lt;version&gt;</code> to uniquely identify one maven module or project.</p>\n<p>Parent POM:</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> \n        <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>\n	    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- parent project --&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.4.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n	\n    <span class=\"hljs-comment\">&lt;!-- self unique identification --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.altria<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sky<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- *NOTE*: the packaging type for a parent POM should be set to pom --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- sub-module --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modules</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>sky-common<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>sky-pojo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>sky-server<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modules</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- This is used to define custom variables (properties) --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Thus we can use it to specify version --&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">java.version</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">java.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mybatis.spring</span>&gt;</span>3.0.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mybatis.spring</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pagehelper</span>&gt;</span>1.4.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pagehelper</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aliyun.sdk.oss</span>&gt;</span>3.17.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aliyun.sdk.oss</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jjwt</span>&gt;</span>0.11.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">jjwt</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jaxb-api</span>&gt;</span>2.3.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">jaxb-api</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- is used to centralize and control the versions of dependencies --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- used throughout a multi-module project --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Then sub-module need not to declare the version --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencyManagement</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${mybatis.spring}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${pagehelper}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jjwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${jjwt}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.aliyun.oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>aliyun-sdk-oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${aliyun.sdk.oss}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>javax.xml.bind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jaxb-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${jaxb-api}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencyManagement</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span>\n</code></pre><h4>exclusion</h4>\n<p>We use <code>&lt;exclusion&gt;</code> to exclued some transitive dependency</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.aliyun.oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>aliyun-sdk-oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>commons-logging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>commons-logging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><h3>Command</h3>\n<p>check version</p>\n<pre><code class=\"hljs language-powershell\">mvn <span class=\"hljs-literal\">-v</span>\n</code></pre><h2>Annotaction</h2>\n<h4>Lombok</h4>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> lombok.Builder;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@Builder</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> {\n    <span class=\"hljs-keyword\">private</span> Long id;\n    <span class=\"hljs-keyword\">private</span> String username;\n    <span class=\"hljs-keyword\">private</span> String email;\n}\n</code></pre><p>@Data will add all coresponding getter and setter for all fields or attributes.</p>\n<p>@Builder can simply constructor. For example:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> User.builder()\n                .id(<span class=\"hljs-number\">1L</span>)\n                .username(<span class=\"hljs-string\">&quot;Saber&quot;</span>)\n                .email(<span class=\"hljs-string\">&quot;Saber@example.com&quot;</span>)\n                .build();\n</code></pre><h4>Spring doc OpenAPI</h4>\n<table>\n<thead>\n<tr>\n<th>Annotation</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@OpenAPIDefinition</code></td>\n<td>Define global OpenAPI configuration (e.g., title, version).</td>\n</tr>\n<tr>\n<td><code>@Operation</code></td>\n<td>Describes a single API operation (summary, description, tags).</td>\n</tr>\n<tr>\n<td><code>@ApiResponse</code></td>\n<td>Describes responses for an operation.</td>\n</tr>\n<tr>\n<td><code>@Parameter</code></td>\n<td>Add detailed parameter info (name, description, required, etc).</td>\n</tr>\n<tr>\n<td><code>@RequestBody</code></td>\n<td>Describe the request body content.</td>\n</tr>\n<tr>\n<td><code>@Schema</code></td>\n<td>Describes a model class or field in more detail (e.g., type, format).</td>\n</tr>\n<tr>\n<td><code>@Tag</code></td>\n<td>Groups endpoints under specific tags in Swagger UI.</td>\n</tr>\n<tr>\n<td><code>@Hidden</code></td>\n<td>Exclude a method, class, or parameter from Swagger documentation.</td>\n</tr>\n</tbody></table>\n<p> It’s used to <strong>generate API documentation</strong> for your Spring Boot project.</p>\n<h3>Spring boot</h3>\n<h4>Global exception handler</h4>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@RestControllerAdvice</span> <span class=\"hljs-comment\">// This.</span>\n<span class=\"hljs-meta\">@Slf4j</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GlobalExceptionHandler</span> {\n    <span class=\"hljs-meta\">@ExceptionHandler</span> <span class=\"hljs-comment\">// And this.</span>\n    <span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title function_\">exceptionHandler</span><span class=\"hljs-params\">(BaseException ex)</span>{\n        log.error(<span class=\"hljs-string\">&quot;异常信息：{}&quot;</span>, ex.getMessage());\n        <span class=\"hljs-keyword\">return</span> Result.error(ex.getMessage());\n    }\n}\n</code></pre><h4>@Bean</h4>\n<p>This is used at method.(However @component is used at class)</p>\n<p><strong>It let the returned class of method be managed by IOC container.</strong></p>\n<p>The <code>@Bean</code> annotation is used on a method to indicate that <strong>the return value of the method should be registered as a bean</strong> in the Spring context.</p>\n<p>A <strong>bean</strong> is simply an object that is managed by the Spring IoC container (Inversion of Control). Spring handles its creation, lifecycle, and dependencies for you.</p>\n<p><strong>It’s usually used inside a class annotated with @Configuration.</strong></p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Slf4j</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebMvcConfiguration</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">WebMvcConfigurationSupport</span> {\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title function_\">docket</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">ApiInfo</span> <span class=\"hljs-variable\">apiInfo</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiInfoBuilder</span>()\n                .title(<span class=\"hljs-string\">&quot;苍穹外卖项目接口文档&quot;</span>)\n                .version(<span class=\"hljs-string\">&quot;2.0&quot;</span>)\n                .description(<span class=\"hljs-string\">&quot;苍穹外卖项目接口文档&quot;</span>)\n                .build();\n        <span class=\"hljs-type\">Docket</span> <span class=\"hljs-variable\">docket</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Docket</span>(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(<span class=\"hljs-string\">&quot;com.sky.controller&quot;</span>))\n                .paths(PathSelectors.any())\n                .build();\n        <span class=\"hljs-keyword\">return</span> docket;\n    }\n}\n</code></pre><h2>Docker</h2>\n<h3>Basics</h3>\n<h4>core terms</h4>\n<p>Image: A snapshot of a file system (like a recipe).</p>\n<p>Container: A running instance of an image (like a dish made from the recipe).</p>\n<p>Dockerfile: A script to build a Docker image.</p>\n<h4>Run redis</h4>\n<p>Create a container with redis in it.</p>\n<pre><code class=\"hljs language-shell\">docker run -d --name redis -p 6379:6379 redis:&lt;version&gt;\n</code></pre><p>Run redis</p>\n<pre><code class=\"hljs language-shell\">docker exec -it redis redis-cli\n</code></pre><h2>Redis</h2>\n<h3>Spring Cache</h3>\n<h4>@CachePut</h4>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Then the key is prfix::suffix</span>\n<span class=\"hljs-comment\">// and value is the return value of method.</span>\n<span class=\"hljs-comment\">// Put this key value into cache after method is executed.</span>\n<span class=\"hljs-meta\">@CachePut(cacheName = &quot;prfix&quot;,  key = &quot;suffix&quot;)</span>\n\n<span class=\"hljs-comment\">// Use #parameter to let the suffix be the parameter.</span>\n<span class=\"hljs-meta\">@CachePut(cacheName = &quot;prfix&quot;,  key = &quot;#parameter&quot;)</span>\n</code></pre><h4>@Cacheable</h4>\n<p>First check if there is in cache. If yes then return. </p>\n<p>Otherwise execute the method and put return value into cache.</p>\n<p>key name is the rule as @CachePut</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@CachePut(cacheName = &quot;prfix&quot;,  key = &quot;suffix&quot;)</span>\n</code></pre><h4>@CacheEvict</h4>\n<p>Delete cache.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@CacheEvict(cacheNames = &quot;setmealCache&quot;, allEntries = true)</span>\n</code></pre><h3>Command</h3>\n<h4>Show all keys</h4>\n<pre><code class=\"hljs language-sh\">keys *\n</code></pre><h4>Delete</h4>\n<pre><code class=\"hljs language-sh\">DEL key1 key2 key3 ... keyN\n\n<span class=\"hljs-comment\"># Delete all the keys of all the existing databases</span>\nflushall\n</code></pre>',8,'Published',0,'2025-05-15 00:09:40','2025-05-15 00:09:40');
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article_tag`
--

DROP TABLE IF EXISTS `article_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `article_tag` (
  `id` int NOT NULL AUTO_INCREMENT,
  `article_id` int NOT NULL,
  `tag_id` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_tag`
--

LOCK TABLES `article_tag` WRITE;
/*!40000 ALTER TABLE `article_tag` DISABLE KEYS */;
INSERT INTO `article_tag` VALUES (1,1,2),(2,1,4),(3,3,7),(4,5,3);
/*!40000 ALTER TABLE `article_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `category` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `description` text,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (1,'cpp','A programming language.','2025-05-07 20:17:10','2025-05-07 20:17:10'),(2,'Programming','Explore tutorials, guides, and insights on software development across various languages and technologies.','2025-05-07 20:25:37','2025-05-07 20:25:37'),(3,'Mathematics','This category includes topics ranging from foundational mathematics to advanced topics such as linear algebra, calculus, number theory and so on.','2025-05-07 20:27:34','2025-05-07 20:27:34'),(4,'Psychology','Discover insights into human behavior, cognition, emotion, and mental processes.','2025-05-07 20:29:03','2025-05-07 20:29:03'),(5,'Economics','Explore the principles that shape markets, influence policy, and drive financial decisions.','2025-05-07 20:29:54','2025-05-07 20:29:54'),(6,'Literature','Delve into the world of storytelling, analysis, and literary critique.','2025-05-07 20:32:08','2025-05-07 20:32:08'),(7,'Miscellaneous','To be edited.','2025-05-14 23:56:47','2025-05-14 23:56:47'),(8,'Test','Articles for test.','2025-05-14 23:59:59','2025-05-14 23:59:59');
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tag` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `description` text,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
INSERT INTO `tag` VALUES (1,'C++','C++ was developed as an extension of C, and both languages have almost the same syntax.','2025-05-07 21:39:39','2025-05-07 21:39:39'),(2,'React','The library for web and native user interfaces.','2025-05-07 21:41:11','2025-05-07 21:41:11'),(3,'Java','Java 常用来写后端。','2025-05-07 21:43:00','2025-05-07 21:43:00'),(4,'Javascript','To be edited','2025-05-07 21:45:54','2025-05-07 21:45:54'),(5,'CSS','To be edited','2025-05-07 21:46:09','2025-05-07 21:46:09'),(6,'Analysis','To be edited','2025-05-07 21:46:32','2025-05-07 21:46:32'),(7,'Linear Algebra','To be edited.','2025-05-07 21:47:06','2025-05-07 21:47:06');
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-05-26 11:04:49
